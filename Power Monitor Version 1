#!/usr/bin/python3
import ina219
import tkinter
import numpy
import matplotlib.animation
from subprocess import call
from gpiozero import Button
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
import matplotlib.animation as animation
import matplotlib.style
from gpiozero import LED
channel = 4
relayEnable = LED(channel)

class Display(tkinter.Tk):
    def __init__(self):
        tkinter.Tk.__init__(self)
        self.attributes("-fullscreen", True)     
        self.title("WCP24 Human Powered USB Charging System")
        self.columnconfigure(0, weight=1)
        self.rowconfigure(0, weight=1)
        #relayEnable.on()
        self.stats = self.Statistics()
        self.curSess = self.Session()
        self.stats.tkraise()
        self.bind("<Key>", self.keyPress)
    def initButton(self):
        self.button = Button(16, hold_time=5)
        self.button.when_pressed = self.toggleSess
        self.button.when_held = powerOff
        return self.button
    def keyPress(self,event):
        if (event.char) == 'x':
            exit()

    def toggleSess(self):
        if self.curSess.start == False: #use interface method
 #          relayEnable.off()
            self.curSess.tkraise()
            self.curSess.start = not self.curSess.start #use interface method
        else:
            relayEnable.on()
            if (self.curSess.loop > 1):
                self.tmp = numpy.mean(self.curSess.yList)*self.curSess.loop
            else:
                self.tmp = 0
            self.stats.sessEnergy = self.tmp
            self.stats.lifetimeEnergy += self.tmp
            open("LifetimeEnergy.txt",'w').close()
            wFile = open("/home/pi/SeniorProject/LifetimeEnergy.txt",'w')
            wFile.write(str(self.stats.lifetimeEnergy))
            wFile.close()
            self.stats.update()
            self.stats.tkraise()
            self.curSess.init = 0.0
            self.curSess.loop = 0
            self.curSess.lowerBnd = 0
            self.curSess.upperBnd = 60
            self.curSess.timeVar.set("00:00")
            self.curSess.a.clear()
            self.curSess.xList.clear()
            self.curSess.yList.clear()
            ########################
            self.curSess.start = not self.curSess.start
    class Statistics(tkinter.Frame):
        def __init__(self):
            tkinter.Frame.__init__(self)
            self.sessEnergy = 0
            self.lifetimeEnergy = 0
            self.xList = []
            self.yList = []
            matplotlib.style.use('fivethirtyeight')
            self.start = False
            self.sessFig = Figure(figsize=(16,8), dpi = 120)
            self.sessFig.set_facecolor('w')
            self.a = self.sessFig.add_subplot(111)
            self.a.title.set_text("Total Energy Produced")
            self.a.set_ylabel("Energy (mJ)")
            self.a.set_axis_bgcolor('white')
            self.label = ['Last Session', 'Lifetime']
            self.index = numpy.arange(len(self.label))
            file = open("/home/pi/SeniorProject/LifetimeEnergy.txt","r")
            self.lifetimeEnergy = float(file.read())
            file.close()
            self.energy = [self.sessEnergy, self.lifetimeEnergy]
            self.a.bar(self.index,self.energy)
            self.a.set_xticks(self.index)
            self.a.set_xticklabels(self.label, fontsize=18)
            self.config(bg="white")
            self.grid(row = 0, column = 0, sticky= "nsew")
            self.titleLab = tkinter.Label(self,text="Session and Lifetime Energy Generation", font=("Roboto", 40), bg = "white")
            self.titleLab.grid(row = 1, column = 2)
            canvas = FigureCanvasTkAgg(self.sessFig, self)
            canvas.show()
            canvas.get_tk_widget().grid(row = 2, column = 1,columnspan = 3,padx = (0,0))
        def update(self):
            self.a.clear()
            self.a.title.set_text("Total Energy Produced")
            self.a.set_ylabel("Energy (mJ)")
            self.a.set_axis_bgcolor('white')
            self.label = ['Last Session', 'Lifetime']
            self.index = numpy.arange(len(self.label))
            self.energy = [self.sessEnergy, self.lifetimeEnergy]
            self.a.bar(self.index,self.energy)
            self.a.set_xticks(self.index)
            self.a.set_xticklabels(self.label)
            self.sessFig.canvas.draw()
    class Session(tkinter.Frame):
        def __init__(self):
            tkinter.Frame.__init__(self)
            self.xList = []
            self.yList = []
            matplotlib.style.use('fivethirtyeight')
            self.genSensor = self.Sensor(0.1,0.6,0x40)
            self.start = False
            self.sessFig = Figure(figsize=(16,7), dpi = 120)
            self.sessFig.set_facecolor('w')
            self.a = self.sessFig.add_subplot(111)
            self.a.title.set_text("Power Produced in mW")
            self.a.set_xlabel("Time (s)")
            self.a.set_ylabel("Power (mW)")
            self.a.set_axis_bgcolor('white')
            self.init = 0.0
            self.loop = 0
            self.lowerBnd = 0
            self.upperBnd = 60
            self.timeVar = tkinter.StringVar() 
            self.curVar= tkinter.StringVar()
            self.powVar = tkinter.StringVar()
            self.voltVar = tkinter.StringVar()
            self.voltVar.set("0 V")
            self.curVar.set("0 mA")
            self.powVar.set("0 mW")
            self.timeVar.set("00:00")
            self.config(bg="white")
            self.grid(row = 0, column = 0, sticky= "nsew")	
            self.titleLab = tkinter.Label(self,text="Power generated for Session", font=("Roboto", 40), bg = "white")
            self.titleLab.grid(row = 1, column = 2)
            self.voltLab = tkinter.Label(self,textvariable = self.voltVar, font=("Roboto", 30), bg = "white")
            self.voltLab.grid(row = 2, column = 1, pady = (10,0), padx = (10,0))
            self.powLab = tkinter.Label(self,textvariable = self.powVar, font=("Roboto", 30), bg = "white")
            self.powLab.grid(row = 2, column = 2, pady =(10,0), padx = (0,0))
            self.curLab = tkinter.Label(self, textvariable = self.curVar, font=("Roboto", 30), bg = "white")
            self.curLab.grid(row = 2, column = 3, pady = (10,0), padx = (0,0))
            self.timeLab = tkinter.Label(self, textvariable = self.timeVar, font=("Roboto", 25), bg = "white")
            self.timeLab.grid(row = 3, column = 2, pady = (25,0))
            canvas = FigureCanvasTkAgg(self.sessFig, self)
            canvas.show()
            canvas.get_tk_widget().grid(row = 4, column = 1,columnspan = 3,padx = (0,0))
        class Sensor(ina219.INA219):
            def __init__(self, par1, par2, par3):
                ina219.INA219.__init__(self, par1, par2, par3)
                ina219.INA219.configure(self,voltage_range=ina219.INA219.RANGE_32V,
                      gain=ina219.INA219.GAIN_AUTO,
                      bus_adc=ina219.INA219.ADC_128SAMP,
                      shunt_adc=ina219.INA219.ADC_128SAMP)
            def getVoltage(self):
                return self.voltage()
            def getCurrent(self):
                return self.current()
            def getPower(self):
                return self.power()	
        def animate(self,i): #needs to use methods that access data
            self.a.title.set_text("Power Produced in mW")
            self.a.set_xlabel("Time (s)", fontsize=18)
            self.a.set_ylabel("Power (mW)",fontsize = 18)
            self.a.set_axis_bgcolor('white')
            if (self.genSensor.getVoltage() > 12):               
                relayEnable.off()
            else:
                relayEnable.on()
            if self.start == True: # level init
                if self.loop == 0 and self.init != 0.0:
                    self.xList.clear()
                    self.yList.clear()
                    self.a.clear()
                    self.lowerBnd = self.init
                    self.upperBnd = self.init + 60
                self.tmp = self.timeVar.get()
                self.d0 = int(self.tmp[0:2])
                self.d1 = int(self.tmp[3:5])
                if (self.d1 + 1) == 60:
                    self.d0 += 1
                    if (self.d0 + 1) > 99:
                        self.d0 = 99
                self.d1 = (self.d1 + 1) % 60
                if self.d1 < 10:	
                    self.d1 = str(self.d1)	
                    if self.d0 < 10:
                        self.d0 = str(self.d0)		
                        self.tmp = "0" + self.d0 + ":0" + self.d1
                    else:
                        self.d0 = str(self.d0)
                        self.tmp = self.d0 + ":0" + self.d1
                else:
                    self.d1 = str(self.d1)
                    if self.d0 < 10:
                        self.d0 = str(self.d0)				
                        self.tmp = "0" + self.d0 + ":" + self.d1
                    else:
                        self.d0 = str(self.d0)				
                        self.tmp = self.d0 + ":" + self.d1
                self.timeVar.set(self.tmp)
                tmpA = round(self.genSensor.getCurrent(),1)
                if tmpA == 0.0 or tmpA < 0:
                    tmpA = 0
                #if int(tmpA) == 0
                #    tmpA = 0
                self.curVar.set(tmpA)
                self.curVar.set(self.curVar.get() + ' mA')
                tmpV = round((self.genSensor.getVoltage()-11.2),1)
                #if tmpV == 0.0 or tmpV < 0:
                #    tmpV = 0
                if int(tmpV) == 0:
                    tmpV = 0
                self.voltVar.set(tmpV)
                self.voltVar.set(self.voltVar.get() + " V")
                self.powVar.set(round(self.genSensor.getPower(),1))
                self.powVar.set(self.powVar.get() + ' mW')
                self.loop = (self.loop + 1)%60
                if self.loop%2 == 0:
                    self.init = self.init + 2
                    self.xList.append(self.init)
                    self.yList.append(self.genSensor.getPower())
                    self.a.scatter(self.xList, self.yList, color = 'blue', s = 100)
                    self.a.set_ybound(0)
                    self.a.set_xbound(self.lowerBnd,self.upperBnd)
def powerOff():
    call("sudo shutdown now", shell=True)
    
powerMonitor = Display()
rstButton = powerMonitor.initButton()
ani = animation.FuncAnimation(powerMonitor.curSess.sessFig, powerMonitor.curSess.animate, interval = 1000)
powerMonitor.mainloop()
